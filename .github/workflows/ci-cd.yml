name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: quotesparkacr.azurecr.io
  IMAGE_NAME: quotespark

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2'
        
    - name: Install dependencies
      run: |
        cd app
        go mod download
        
    - name: Run tests
      run: |
        cd app
        go test -v ./...
        
    - name: Build application
      run: |
        cd app
        go build -o quotespark .

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.0"
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      run: |
        cd infra
        terraform init
        
    - name: Terraform Plan
      run: |
        cd infra
        terraform plan -out=tfplan
      env:
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_resource_group_name: ${{ secrets.AZURE_RESOURCE_GROUP }}
        TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
        TF_VAR_storage_account_name: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
        TF_VAR_groq_api_key: ${{ secrets.GROQ_API_KEY }}
        TF_VAR_acr_login_server: ${{ secrets.ACR_LOGIN_SERVER }}
        TF_VAR_acr_username: ${{ secrets.ACR_USERNAME }}
        TF_VAR_acr_password: ${{ secrets.ACR_PASSWORD }}
        TF_VAR_container_image_url: ${{ secrets.CONTAINER_IMAGE_URL }}
        
    - name: Terraform Apply
      run: |
        cd infra
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_resource_group_name: ${{ secrets.AZURE_RESOURCE_GROUP }}
        TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
        TF_VAR_storage_account_name: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
        TF_VAR_groq_api_key: ${{ secrets.GROQ_API_KEY }}
        TF_VAR_acr_login_server: ${{ secrets.ACR_LOGIN_SERVER }}
        TF_VAR_acr_username: ${{ secrets.ACR_USERNAME }}
        TF_VAR_acr_password: ${{ secrets.ACR_PASSWORD }}
        TF_VAR_container_image_url: ${{ secrets.CONTAINER_IMAGE_URL }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 